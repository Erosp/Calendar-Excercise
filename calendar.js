$(document).ready(function()
{

    /* Declaration of global variables and list of holidays */
    /* Declaracion de variables globales y lista de dias feriados */
    var start;
    var number;
    var country;
    var holydays=[["15", "27", "28"], ["04, 14", "20"], ["01", "08", "22"], ["07", "22", "23"], ["03", "15", "16"], ["15", "16", "29"], ["11", "18", "28"], ["12", "19", "23"], ["05", "16", "21"], ["01", "12", "24"], ["06", "14", "20"], ["03", "24", "25"]];

    /* Event generated by clicking the button to generate 
    the calendar */
    /* Evento generado al hacer click al boton para generar
    el calendario */    
    $("#generate").on("click", function()
    {

        /* Call to the function that validates the necessary fields
        to generate the calendar */
        /* Llamado a la funcion que valida los campos necesarios 
        para generar el calendario */
        var validatedCalendar=validateCalendar();
        /* Verify that the validation is correct */
        /* Verifica que la validacion este correcta */
        if(validatedCalendar==true)
        {
            
            /* In case there is already a generated calendar it
            cleans it */
            /* En caso que ya exista un calendario generado 
            lo limpia */
            $("#divCalendar").empty();
            /* Call to the function that generates an array 
            with the dates to show in the calendar */
            /* Llamado a la funcion que genera un arreglo con las
            fechas a mostrar en el calendario */
            var arrayDays=generate(start, number);
            /* Call to the function that determines which day of 
            the week will begin to show the dates in the calendar */
            /* Llamado a la funcion que determina en que dia de
            la semana se comenzara a mostrar las fechas en el
            calendario */
            var numberWeekDay=weekDayInit(start);
            /* Call to the function that generates an array with the dates divided by month and years */
            /* Llamado a la funcion que genera un arreglo con las
            fechas dividas por mes y años */
            var selectMonths=selectMonth(arrayDays);
            /* Call to the function that the calendar generates */
            /* Llamado a la funcion que genera el calendario */
            printDays(numberWeekDay, selectMonths, holydays);

        }

    });

    /* Function that validates the necessary fields to generate 
    the calendar */
    /* Funcion que valida los campos necesarios para generar 
    el calendario */
    function validateCalendar()
    {

        start=$("#start").val();
        number=$("#number").val();
        country=$("#country").val();

        /* Verify that all the fields necessary to generate the
        calendar are full */
        /* Verifica que todos los campos necesarios para generar 
        el calendario esten llenos */
        if(start=="" || number=="" || country=="")
        {

            alert("Fill in the fields for the Start Day, Number of Days and Country Code.");
            return false;

        }

        else 
        {

            return true;

        }

    }

    /* Function that generates an array with the dates to show 
    in the calendar */
    /* Funcion que genera un arreglo con las fechas a mostrar 
    en el calendario */
    function generate(start, number)
    {

        /* Take the date and divide it into year, month and day */
        /* Toma la fecha y la divide en año, mes y dia */
        var year=start.split('-')[0];
        var month=start.split('-')[1];
        var day=start.split('-')[2];

        var dt = new Date(month+' '+day+', '+year);
        var generateDays=[];

        /* Cycle that uses the number of days to calculate and save
        in an array the dates that will be displayed in the calendar */
        /* Ciclo que usa el numero de dias para calcular y guardar en
        un arreglo las fechas que seran mostrados en el calendario */
        for(var i=0; i<number; i++)
        {

            dt = new Date(month+' '+day+', '+year);
            dt.setDate(dt.getDate()+i);
            var newDt=new Date(dt);

            generateDays.push(newDt);

        }

        /* Returns the array with the list of generated dates */
        /* Devuelve el arreglo con la lista de fechas generadas */
        return generateDays;

    }

    /* Function that determines in which day of the week will begin
    to show the dates in the calendar */
    /* Funcion que determina en que dia de la semana se comenzara 
    a mostrar las fechas en el calendario */
    function weekDayInit(start)
    {

        /* Take the date and divide it into year, month and day */
        /* Toma la fecha y la divide en año, mes y dia */
        var year=start.split('-')[0];
        var month=start.split('-')[1];
        var day=start.split('-')[2];

        var dt = new Date(month+' '+day+', '+year);

        /* Get the day number and return it */
        /* Obtiene el numero de dia y lo devuelve */
        var numberWeekDay=dt.getUTCDay();
        
        return numberWeekDay;

    }

    /* Function that generates an array with dates divided 
    by month and years */
    /* Funcion que genera un arreglo con las fechas dividas por 
    mes y años */
    function selectMonth(arrayDays)
    {

        /* Get the month and the initial year to combine it 
        in "month-year" format. Example: "06-2018" */
        /* Obtiene el mes y el año inicial para combinarlo en 
        formato "mes-año". Ejemplo: "06-2018" */
        var initMonth=arrayDays[0].toISOString().split('-')[1];
        var initYear=arrayDays[0].toISOString().split('-')[0];
        var initDate=initMonth+"-"+initYear;
        
        /* The variable countMonth is used to count the number 
        of months to print to generate */
        /* La variable countMonth es usada para contar la cantidad 
        de meses a imprimir a generar */
        var countMonth=1;
        
        /* Declaration of the arrayMonth array where the 
        initial month and year are saved in the combined format
        previously and subsequently they will also be saved every 
        month to be generated with their respective year */
        /* Declaracion de el arreglo arrayMonth donde se guarda el 
        mes y año inicial en el formato combinado anteriormente 
        y posteriormente tambien se guardaran todos los meses a
        generar con su respectivo año */
        var arrayMonth=[];
        arrayMonth.push(initDate);
        
        /* Declaration of the array arrayDate where the days 
        will be saved that will be shown in the calendar grouped 
        by month-year */
        /* Declaracion del arreglo arrayDate donde se guardaran 
        los dias que seran mostrados en el calendario agrupados 
        por mes-año */
        var arrayDate=[];

        /* Cycle that calculates the number of months per year in 
        the array that contains the list of days to be generated 
        and adds them in the arrayMonth array in a combined 
        month-year format */
        /* Ciclo que calcula la cantidad de meses por año en el 
        arreglo que contiene la lista de dias a generar y los añade 
        en el arreglo arrayMonth en formato combinado mes-año */
        for(var i=0; i<arrayDays.length; i++)
        {

            var evaluateMonth=arrayDays[i].toISOString().split('-')[1];
            var evaluateYear=arrayDays[i].toISOString().split('-')[0];
            var evaluateDate=evaluateMonth+"-"+evaluateYear;
            
            if(evaluateDate!=arrayMonth[countMonth-1])
            {

                arrayMonth.push(evaluateDate);
                countMonth++;

            }

        }

        /* Cycle that organizes the dates to be generated per 
        month-year */
        /* Ciclo que organiza las fechas a generarse por mes-año */
        for(var j=0; j<countMonth; j++)
        {

            var arrayMonthDays=[];
            arrayMonthDays.push(arrayMonth[j]);

            var arrayListDays=[];

            /* Cycle where each date is compared individually to be
            assigned to the correct month-year group */
            /* Ciclo en donde se compara cada fecha individualmente
            para asignarlas al grupo de mes-año correcto */
            for(var k=0; k<arrayDays.length; k++)
            {

                var evaluateMonthDay=arrayDays[k].toISOString().split('-')[1];
                var evaluateYearDay=arrayDays[k].toISOString().split('-')[0];
                var evaluateDateDay=evaluateMonthDay+"-"+evaluateYearDay;

                /* If the month-year of the date evaluated coincides
                with the month-year of the previously generated 
                month-year list, then add that date to a list 
                of days */
                /* Si el mes-año de la fecha evaluada coincide con 
                el mes-año de la lista de mes-año previamente generada,
                entonces añade esa fecha a una lista de dias */
                if(arrayMonth[j]==evaluateDateDay )
                {

                    arrayListDays.push(arrayDays[k]);

                }

            }

            /* The list of days is added to a list of days per month
            and then that list of days per month is added to the 
            final list of dates per month */
            /* La lista de dias es añadida a una lista de dias por 
            mes y luego esa lista de dias por mes es añadida a la 
            lista final de fechas por mes */
            arrayMonthDays.push(arrayListDays);
            arrayDate.push(arrayMonthDays);

        }

        /* Model example of the array arrayDate */
        /* Modelo ejemplo del arreglo arrayDate */
        /* 
        arrayDate => array(
                        0:array(
                            0:"06-2018"
                            1:array(
                                0:Tue Jun 26 2018
                                1:Wed Jun 27 2018
                                2:Thu Jun 28 2018
                                3:Fri Jun 29 2018
                                4:Sat Jun 30 2018
                            )
                        ),
                        1:array(
                            0:"07-2018"
                            1:array(
                                0:Sun Jun 01 2018
                                1:Mon Jun 02 2018
                                2:Tue Jun 03 2018
                                3:Wed Jun 04 2018
                                4:Thu Jun 05 2018
                            )
                        )
                    ) 
        */
        
        /* Returns the list of dates organized in an array */
        /* Devuelve la lista de fechas organizadas en un arreglo */
        return arrayDate;

    }

    /* Function that generates the calendar */
    /* Funcion que genera el calendario */
    function printDays(numberWeekDay, selectMonths, holydays)
    {

        /* Declaration of array listMonth, which contains the list 
        of abbreviated months and declaration of the htmlCalendar
        variable that will store the generated and concatenated 
        html code and then insert it in the DOM */
        /* Declaracion del array listMonth, que contiene la lista 
        de meses abreviados y declaracion de la variable htmlCalendar
        que almacenara el codigo html generado y concatenado para 
        luego insertarlo en el DOM */
        var listMonth=["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        var htmlCalendar='';

        /* Cycle that generates the html code of each month */
        /* Ciclo que genera el codigo html de cada mes */
        for(var i=0; i<selectMonths.length; i++)
        {

            /* Declare the necessary variables to generate the 
            calendar per month, countDay keeps the account of 
            which day of the week should be printed */
            /* Declara la variables necesarias para generar el
            calendario por mes, countDay lleva la cuenta de en 
            cual dia de la semana se debe imprimir */
            var countDay=0;
            var month=parseInt(selectMonths[i][0].split('-')[0])-1;
            var year=selectMonths[i][0].split('-')[1];

            /* Calendar Header */
            /* Encabezado del calendario */
            htmlCalendar='<div class="month-calendar">'+
            '<div class="cal-header">'+
            '<label class="square weekend">S</label>'+
            '<label class="square">M</label>'+
            '<label class="square">T</label>'+
            '<label class="square">W</label>'+
            '<label class="square">T</label>'+
            '<label class="square">F</label>'+
            '<label class="square weekend">S</label>'+
            '</div>'+
            '<div class="cal-month-title">'+
            '<label>'+listMonth[month]+' '+year+'</label>'+
            '</div>';

            /* If the day of the week in which you start the dates 
            in the calendar is greater than 0 (that is, it is 
            different from Sunday) then this part of the code 
            is responsible for filling in the remaining space until 
            the dates of the calendar begin on the day of the
            corresponding week */
            /* Si el dia de la semana en que inicia las fechas en el
            calendario es mayor a 0 (es decir es diferente a domingo)
            entonces esta parte del codigo se encarga de rellenar el
            espacio restante hasta que empiecen las fechas del
            calendario en el dia de la semana correspondiente */
            if(numberWeekDay>0)
            {

                for(var j=0; j<numberWeekDay; j++)
                {

                    if(countDay<numberWeekDay)
                    {

                        /* If the day of the week is 0 (that is to 
                        say Sunday) the class weekend is added to
                        differentiate that it is weekend */
                        /* Si el dia de la semana es 0 (es decir
                        domingo) se agrega la clase weekend para
                        diferenciar que es fin de semana */
                        if(countDay==0)
                        {

                            htmlCalendar+='<div class="cal-day-row">'+
                            '<label class="square weekend empty"></label>';

                        }

                        else 
                        {

                            htmlCalendar+='<label class="square empty"></label>';

                        }

                        countDay++;
                    }

                }

            }

            /* Cycle that is responsible for filling the calendar 
            with the dates corresponding to the initial date and 
            the number of days selected */
            /* Ciclo que se encarga de llenar el calendario con las
            fechas correspondientes a la fecha inicial y el numero 
            de dias seleccionado */
            for(var k=0; k<selectMonths[i][1].length; k++)
            {

                /* Save the day to add by going through the 
                array according to the "k" index */
                /* Guarda el dia a agregar recorriendo el arreglo
                segun el indice "k" */
                var day=selectMonths[i][1][k].toISOString().split('-')[2].split('T')[0];
                var weekendClass="";
                var holydayClass="";

                /* Determine if the day to add is weekend */
                /* Determina si el dia a agregar es fin de semana */
                if(countDay==0)
                {

                    weekendClass="weekend";
                    countDay++;

                }

                else if(countDay==6)
                {

                    weekendClass="weekend";
                    countDay=0;

                }

                else 
                {

                    countDay++;

                }
                
                /* Determine if the day to add is a holiday */
                /* Determina si el dia a agregar es feriado */
                for(var l=0; l<holydays[month].length; l++)
                {
                    
                    if(holydays[month][l]==day)
                    {
                        
                        weekendClass="";
                        holydayClass="holyday";
                        
                    }
                    
                }
                
                htmlCalendar+='<div class="cal-day-row">'+
                '<label class="square '+weekendClass+' '+holydayClass+'">'+day+'</label>';

            }
            
            /* Fill in the remaining spaces to complete the week after adding all dates to the calendar */
            /* Llena los espacios restantes para completar la semana
            luego de agregar todas las fechas al calendario */
            if(countDay>0)
            {

                for(var m=countDay; m<7; m++)
                {

                    htmlCalendar+='<label class="square empty"></label>';
                    
                }
                
            }
            
            htmlCalendar+='</div>';
            $("#divCalendar").append(htmlCalendar);
            
            /* Save the day of the week when the month ended to
            determine on what day of the week the next month begins */
            /* Guarda el dia de la semana en que termino el mes 
            para determinar en que dia de la semana comienza el
            siguiente mes */
            numberWeekDay=countDay;

        }

    }
    
    /* Event generated by clicking the add holiday button */
    /* Evento generado al hacer click en el boton de agregar 
    dia feriado */
    $("#addHolyday").on("click", function(){
        
        /* Call to the function that is valid if the field where 
        a new holiday is selected is full */
        /* Llamado a la funcion que valida si el campo donde se
        selecciona un nuevo dia feriado esta lleno */
        var validatedHolyday=validateHolyday();
        
        /* If the holiday field is full, the function continues */
        /* Si el campo de dia feriado esta lleno continua la funcion */
        if(validatedHolyday!=false)
        {
            
            /* Call to the function that generates an array 
            with the day and the month to add as a holiday */
            /* Llamado a la funcion que genera un arreglo con el dia 
            y el mes a agregar como feriado */
            var holydayDateArray=holydayDate(validatedHolyday);
            /* Call to the function that verifies that the holiday 
            is not already on the list of holidays */
            /* Llamado a la funcion que verifica que el dia feriado
            no este ya en la lista de dias feriados */
            var checkedHolyday=checkHolyday(holydayDateArray);
            
            /* If the holiday is not added add it */
            /* Si el dia feriado no esta agregado lo agrega */
            if(checkedHolyday==true)
            {
                
                /* Call to the function that adds the holiday to 
                the list */
                /* Llamado a la funcion que agrega el dia feriado
                a la lista */
                addHolyday(holydayDateArray);
                
            }
            
        }
        
    });
    
    /* Function that is valid if the field where a new holiday 
    is selected is full */
    /* Funcion que valida si el campo donde se selecciona un nuevo 
    dia feriado esta lleno */
    function validateHolyday()
    {
        
        /* Variable that saves the holiday to add */
        /* Variable que guarda el dia feriado a agregar */
        var holyday=$("#holyday").val();
        
        /* If the holiday is empty, an alert is generated */
        /* Si el dia feriado esta vacio se genera un alerta */
        if(holyday=="")
        {
            
            alert("Select a date to add it to the holiday list.");
            return false;
            
        }
        
        /* If the holiday is full, the date is returned */
        /* Si el dia feriado esta lleno se devuelve la fecha */
        else
        {
            
            return holyday;
            
        }
        
    }
    
    
    /* Function that generates an array with the day and 
    the month to add as a holiday */
    /* Funcion que genera un arreglo con el dia y el mes a agregar 
    como feriado */
    function holydayDate(validatedHolyday)
    {
        
        /* Generates and returns an array with the day and 
        month to add as a holiday */
        /* Genera y devuelve un arreglo con el dia y el mes a 
        agregar como feriado */
        var month=parseInt(validatedHolyday.split('-')[1])-1;
        var day=validatedHolyday.split('-')[2];
        var holydayDate=[month, day];
        return holydayDate;
        
    }
    
    /* Function that verifies that the holiday is not already on 
    the list of holidays */
    /* Funcion que verifica que el dia feriado no esta ya en la 
    lista de dias feriados */
    function checkHolyday(holydayDateArray)
    {
        
        /* Separate the holiday in day and month */
        /* Separa el dia feriado en dia y mes */
        var checkHolyday=true;
        var month=holydayDateArray[0];
        var day=holydayDateArray[1];
        
        /* Verify in the list of holidays if the selected day 
        is already added */
        /* Verifica en la lista de dias feriados si el dia 
        seleccionado ya esta agregado */
        for(var i=0; i<holydays[month].length; i++)
        {
            
            /* If the selected holiday is already on the list, 
            an alert is generated and the selected day is not 
            added to the list */
            /* Si el dia feriado seleccionado ya esta en la lista 
            se genera un alerta y no se agrega el dia selecciona 
            a la lista */
            if(holydays[month][i]==day)
            {
                
                checkHolyday=false;
                alert("The holiday already exists.");
                
            }
            
        }

        /* It is returned "true" in case the holiday is not in the 
        list and if it is returned in the list "false" */
        /* Se devuelve "verdadero" en caso de que el dia feriado no
        este en la lista y en caso que si este en la lista se 
        devuelve "falso" */
        return checkHolyday;
        
    }
    
    /* Function that adds the holiday to the list */
    /* Funcion que agrega el dia feriado a la lista */
    function addHolyday(holydayDateArray)
    {
        
        /* Separates the holiday in month and day, to add it to 
        the holiday list and then generates an alert of the 
        culminated event */
        /* Separa el dia feriado en mes y dia, para añadirlo a 
        la lista de dias feriado y luego se genera un alerta 
        del evento culminado */
        var month=holydayDateArray[0];
        var day=holydayDateArray[1];
        holydays[month].push(day);
        alert("Holiday successfully added.");
        
    }

});